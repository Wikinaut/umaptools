const puppeteer = require('puppeteer');         // Require Puppeteer module
const fs = require('fs');
const myArgs = process.argv.slice(2);

// Create multiple screenshots: screenshots of a umap with a grid file
//
// The grid file can be generated by a separate Python script ./gridparse.py
// which creates a json file with grid coordinates and sector identifiers like "A1"
//
// Single screenshot file get filenames like umapnumber-sectorid.png
// example: "123456-A1.png"

prefix = "./umap-";

if (myArgs.length < 1) {

   console.log("Usage: node make-tiled-screenshot.js umap-grid.json [width height imageoutputfile]\n" +
     "umap-grid.json: grid file with grid coordinates and sector identifiers\n" +
     "Defaults:\nwidth   900\nheight  900\noutfile screenshot.png")
   return

} else if (myArgs.length == 1) {

   url = myArgs[0]
   userwidth = 900,
   userheight = 900,
   outfile = "./screenshot.png";

} else {

  url = myArgs[0];
  userwidth = parseInt(myArgs[1],10);
  userheight = parseInt(myArgs[2],10);
  outfile = ( myArgs.length == 4 ) ? myArgs[3] : "./screenshot.png";

}

rawdata = fs.readFileSync(myArgs[0])
data = JSON.parse(rawdata)

boxes = (data['features'][0]);

boxes.forEach(function(box){
  makescreenshot(JSON.parse(box['properties']['description']),box['properties']['name']);
})

return

function makescreenshot(p,sector) {

  midlon = p['midlon']
  midlat = p['midlat']
  umapnumber = p['umap']
  outf = prefix+umapnumber+"-"+sector+".png";
  url = "https://umap.openstreetmap.fr/de/map/__"+umapnumber+"#19/"+midlat+"/"+midlon;

  console.log("...processing "+url)

const Screenshot = async (url,sector,outf) => {                // Define Screenshot function

   const browser = await puppeteer.launch({headless:true,slowMo: 250 });    // Launch a "browser"
   const page = await browser.newPage();        // Open a new page
   await page.setViewport({
     width: userwidth,
     height: userheight,
     deviceScaleFactor: 1.0,
   });

   await page.goto(url);                        // Go to the website
   await page.screenshot({                      // Screenshot the website using defined options
    path: outf,                                 // Save the screenshot in current directory
    fullPage: true                              // take a fullpage screenshot
   });
  console.log(sector+"...screenshot "+userwidth+"x"+userheight+" written to "+outf)

  await page.close();                           // Close the website
  await browser.close();                        // Close the browser
}

Screenshot(url,sector,outf);                                   // Call the Screenshot function

}
